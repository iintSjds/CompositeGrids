[[https://numericaleft.github.io/CompositeGrids.jl/dev/][https://img.shields.io/badge/docs-dev-blue.svg]]

#+OPTIONS: toc:2

* Introduction

  CompositeGrids gives a unified interface to generate various common 1D grids
  and also the composite grids that is a combination of basic grids,
  together with the floor function, interpolation function and also integration function
  that is optimized for some of the grids.
  
* Table of Contents :TOC_2_gh:
- [[#introduction][Introduction]]
- [[#quick-start][Quick Start]]
- [[#installation][Installation]]
- [[#manual][Manual]]
  - [[#simple-grids][Simple Grids]]
  - [[#composite-grids][Composite Grids]]
  - [[#interpolation-and-integration][Interpolation and Integration]]

* Quick Start
  #+begin_src julia :session :results output replace :exports both
    using CompositeGrids
    β = 10
    
    # Generating a log densed composite grid with LogDensedGrid()
    tgrid = CompositeGrid.LogDensedGrid(:gauss, [0.0, β], [0.0, β], 4, 0.001, 5)
    # The base type of the grid is :gauss which is optimized for integration, for interpolation use :cheb
    # The grid is defined on [0.0, β], and is densed at 0.0 and β, as given by 2nd and 3rd parameter.
    # The grid has 3 layers.
    # The outer layer is defined by the boundary and densed points. In this case its:
    println("Outer layer:",tgrid.panel.grid)
    # The middle layer is a log grid with 4 points and minimum interval length 0.001:
    println("First subgrid of middle layer:",tgrid.subgrids[1].panel.grid)
    # The inner layer is a Gauss-Legendre grid with 5 points:
    println("First subgrid of inner layer:",tgrid.subgrids[1].subgrids[1].grid)
    
    # function to be integrated:
    f(t) = exp(t)+exp(β-t)
    # numerical value on grid points:
    data = [f(t) for (ti, t) in enumerate(tgrid.grid)]
    
    # integrate with integrate1D():
    int_result = Interp.integrate1D(data, tgrid)
    
    println("result=",int_result)
    println("comparing to:",2*(exp(β)-1))
  #+end_src

  #+RESULTS:
  : Outer layer:[0.0, 5.0, 10.0]
  : First subgrid of middle layer:[0.0, 0.001, 0.07071067811865475, 5.0]
  : First subgrid of inner layer:[4.691007703066803e-5, 0.00023076534494715847, 0.0005, 0.0007692346550528415, 0.000953089922969332]
  : result=44050.865988011356
  : comparing to:44050.931589613436
  
* Installation
  Static version could be installed via standard package manager with Pkg.add("CompositeGrids").

  For developing version, git clone this repo and add with Pkg.develop("directory/of/the/repo").
  
* Manual
  
** Simple Grids

   Various basic grids are designed for usage and also as components of composite grids, including:
   Arbitrary, Uniform, Log, BaryCheb, and GaussLegendre.

   Arbitrary grid is the most general basic grid, which takes an array and turn it into a grid.
   A O(ln(N)) floor function based on searchsortedfirst() is provided.

   Uniform grid is defined by the boundary and number of grid points.
   A O(1) floor function is provided.

   Log grid is defined by the boundary, number of grid points, minimum interval, and also the direction.
   A log densed grid is generated according to the parameters provided.
   For example:
   #+begin_src julia :session :results output replace :exports both
     using CompositeGrids
     loggrid = SimpleGrid.Log{Float64}([0.0,1.0], 6, 0.0001, true)
     println(loggrid.grid)
   #+end_src

   #+RESULTS:
   : [0.0, 0.00010000000000000005, 0.0010000000000000002, 0.010000000000000002, 0.1, 1.0]
   A O(1) floor function is provided.

   BaryCheb grid is designed for interpolation. It's defined by the boundary and number of grid points,
   but the grid points are not distributed uniformly. The floor function is not optimized
   so the O(ln(N)) function will be used, but the interpolation is based on an optimized algorithm.

   GaussLegendre grid is designed for integration. It's defined by the boundary and number of grid points,
   but the grid points are not distributed uniformly. The floor function is not optimized
   so the O(ln(N)) function will be used. The 1D integration is optimized.

   Also notice that there's open grids and closed grids. Closed grids means that the boundary points are
   also grid points, while open grids means the opposite. Only BaryCheb and GaussLegendre are open.
   
   A detailed manual can be found [[https://numericaleft.github.io/CompositeGrids.jl/dev/lib/simple/][here]].
   
** Composite Grids

   A detailed manual can be found [[https://numericaleft.github.io/CompositeGrids.jl/dev/lib/composite/][here]].
      
** Interpolation and Integration
   
   A detailed manual can be found [[https://numericaleft.github.io/CompositeGrids.jl/dev/lib/interpolate/][here]].


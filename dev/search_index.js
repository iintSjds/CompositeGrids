var documenterSearchIndex = {"docs":
[{"location":"lib/composite/#Composite-Grids","page":"Composite Grids","title":"Composite Grids","text":"","category":"section"},{"location":"lib/composite/","page":"Composite Grids","title":"Composite Grids","text":"Modules = [CompositeGrids.CompositeG]","category":"page"},{"location":"lib/composite/#CompositeGrids.CompositeG","page":"Composite Grids","title":"CompositeGrids.CompositeG","text":"Composite grid that has tree structure. The whole interval is first divided by a panel grid, then each interval of a panel grid is divided by a smaller grid in subgrids. Subgrid could also be composite grid.\n\n\n\n\n\n","category":"module"},{"location":"lib/composite/#CompositeGrids.CompositeG.Composite","page":"Composite Grids","title":"CompositeGrids.CompositeG.Composite","text":"struct Composite{T<:AbstractFloat,PG,SG} <: SimpleG.ClosedGrid\n\nComposite grid generated with panel grid of type PG and subgrids of type SG. PG should always be ClosedGrid, while SG could be any grid.\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\npanel : panel grid\nsubgrids : a vector of subgrids\ninits : index of the first grid point of a subgrid on the whole grid\n\n#Constructor:\n\nfunction Composite{T,PG,SG}(panel, subgrids) where {T<:AbstractFloat,PG,SG}\n\ncreate Composite grid from panel and subgrids. if the boundary grid point of two neighbor subgrids are too close, they will be combined in the whole grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/composite/#Base.floor-Union{Tuple{SG}, Tuple{PG}, Tuple{T}, Tuple{CompositeGrids.CompositeG.Composite{T, PG, SG}, Any}} where {T, PG, SG}","page":"Composite Grids","title":"Base.floor","text":"function Base.floor(grid::Composite{T,PG,SG}, x) where {T,PG,SG}\n\nfirst find the corresponding subgrid by flooring on panel grid, then floor on subgrid and collect result. give the floor result on the whole grid. if floor on panel grid is needed, simply call floor(grid.panel, x).\n\nreturn 1 for x<grid[1] and grid.size-1 for x>grid[end].\n\n\n\n\n\n","category":"method"},{"location":"lib/composite/#CompositeGrids.CompositeG.CompositeLogGrid","page":"Composite Grids","title":"CompositeGrids.CompositeG.CompositeLogGrid","text":"function CompositeLogGrid(type, bound, N, minterval, d2s, order, T=Float64)\n\ncreate a composite grid with a Log grid as panel and subgrids of selected type.\n\n#Members:\n\ntype : type of the subgrids, currently in [:cheb, :gauss, :uniform]\nbound : boundary of the grid\nN : number of grid points of panel grid\nminterval : minimum interval of panel grid\nd2s : panel grid is dense to sparse or not\norder : number of grid points of subgrid\n\n\n\n\n\n","category":"function"},{"location":"lib/composite/#CompositeGrids.CompositeG.LogDensedGrid","page":"Composite Grids","title":"CompositeGrids.CompositeG.LogDensedGrid","text":"function LogDensedGrid(type, bound, dense_at, N, minterval, order, T=Float64)\n\ncreate a composite grid of CompositeLogGrid as subgrids. the grid is densed at selected points in dense_at, which in the real situation could be [kF,] for fermi k grid and [0, 2kF] for bose k grid, etc. if two densed point is too close to each other, they will be combined.\n\n#Members:\n\ntype : type of the subgrid of subgrid, currently in [:cheb, :gauss, :uniform]\nbound : boundary of the grid\ndense_at : list of points that requires densed grid\nN : number of grid points of panel grid\nminterval : minimum interval of panel grid\norder : number of grid points of subgrid\n\n\n\n\n\n","category":"function"},{"location":"lib/interpolate/#Interpolation-and-Integration","page":"Interpolation and Integration","title":"Interpolation and Integration","text":"","category":"section"},{"location":"lib/interpolate/","page":"Interpolation and Integration","title":"Interpolation and Integration","text":"Modules = [CompositeGrids.Interp]","category":"page"},{"location":"lib/interpolate/#CompositeGrids.Interp","page":"Interpolation and Integration","title":"CompositeGrids.Interp","text":"Provide interpolation and integration.\n\n\n\n\n\n","category":"module"},{"location":"lib/interpolate/#CompositeGrids.Interp.dataslice-Tuple{Any, Int64, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.dataslice","text":"function dataslice(data, axes, indices)\n\nReturn a view of data sliced on given axes with given indices. Works like view(data, (:, ..., :, i1:f1,  :, ..., in:fn, :, ..., :)). Type unstable unless slice dims are constant.\n\n#Members:\n\ndata: data to be sliced.\naxes: axes to be sliced. accept Int or NTuple{DIM, Int} for single or multiple axes. when omitted, assume all axes.\nindices: indices of slicing. accept UnitRange{Int} or Vector of UnitRange{Int} like 2:8 or [2:8, 3:7]\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.differentiate1D-Union{Tuple{T}, Tuple{Any, T, Any}} where T","page":"Interpolation and Integration","title":"CompositeGrids.Interp.differentiate1D","text":"function differentiate1D(data, xgrid, x; axis=1)\n\ncalculate integration of data[i] on xgrid. For 1D data, return a number; for multiple dimension, reduce the given axis.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: point to differentiate\naxis: axis to be differentiated in data\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.findneighbor-Union{Tuple{T}, Tuple{T, Any}} where T","page":"Interpolation and Integration","title":"CompositeGrids.Interp.findneighbor","text":"function findneighbor(xgrid::T, x; method=:default) where {T}\n\nFind neighbor grid points and related information for extrapolating the value of x on xgrid.\n\n#Members:\n\nxgrid: grid to be interpolated\nx: value to be interpolated\nmethod: :default use optimized method, :linear use linear interp.\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.integrate1D-Tuple{CompositeGrids.Interp.ChebIntegrate, Any, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.integrate1D","text":"function integrate1D(::ChebIntegrate, data, xgrid)\n\ncalculate integration of data[i] on xgrid works for grids that have integration weight stored\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.integrate1D-Tuple{CompositeGrids.Interp.NoIntegrate, Any, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.integrate1D","text":"function integrate1D(::NoIntegrate, data, xgrid)\n\ncalculate integration of data[i] on xgrid works for grids that do not have integration weight stored\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.integrate1D-Tuple{CompositeGrids.Interp.WeightIntegrate, Any, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.integrate1D","text":"function integrate1D(::WeightIntegrate, data, xgrid)\n\ncalculate integration of data[i] on xgrid works for grids that have integration weight stored\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.integrate1D-Union{Tuple{GT}, Tuple{CompositeGrids.Interp.CompositeIntegrate, Any, GT}} where GT","page":"Interpolation and Integration","title":"CompositeGrids.Interp.integrate1D","text":"function integrate1D(::CompositeIntegrate, data, xgrid)\n\ncalculate integration of data[i] on xgrid call integrate1D for each subgrid and return the sum.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.integrate1D-Union{Tuple{T}, Tuple{Any, T, Any}} where T","page":"Interpolation and Integration","title":"CompositeGrids.Interp.integrate1D","text":"function integrate1D(data, xgrid, range; axis=1)\n\ncalculate integration of data[i] on xgrid. For 1D data, return a number; for multiple dimension, reduce the given axis.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nrange: range of integration, [init, fin] within bound of xgrid.\naxis: axis to be integrated in data\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.integrate1D-Union{Tuple{T}, Tuple{Any, T}} where T","page":"Interpolation and Integration","title":"CompositeGrids.Interp.integrate1D","text":"function integrate1D(data, xgrid; axis=1)\n\ncalculate integration of data[i] on xgrid. For 1D data, return a number; for multiple dimension, reduce the given axis.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\naxis: axis to be integrated in data\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.interp1D-Tuple{CompositeGrids.Interp.ChebInterp, Any, Any, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.interp1D","text":"function interp1D(::ChebInterp, data, xgrid, x)\n\nlinear interpolation of data(x), barycheb for BaryCheb grid\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.interp1D-Union{Tuple{GT}, Tuple{CompositeGrids.Interp.CompositeInterp, Any, GT, Any}} where GT","page":"Interpolation and Integration","title":"CompositeGrids.Interp.interp1D","text":"function interp1D(::CompositeInterp,data, xgrid, x)\n\nlinear interpolation of data(x), first floor on panel to find subgrid, then call interp1D on subgrid \n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.interp1D-Union{Tuple{GT}, Tuple{CompositeGrids.Interp.LinearInterp, Any, GT, Any}} where GT","page":"Interpolation and Integration","title":"CompositeGrids.Interp.interp1D","text":"function interp1D(::LinearInterp,data, xgrid, x)\n\nlinear interpolation of data(x), use floor and linear1D\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.interp1D-Union{Tuple{T}, Tuple{Any, T, Any}} where T","page":"Interpolation and Integration","title":"CompositeGrids.Interp.interp1D","text":"function interp1D(data, xgrid, x; axis=1, method=InterpStyle(T))\n\nlinear interpolation of data(x) with single or multiple dimension. For 1D data, return a number; for multiple dimension, reduce the given axis.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\naxis: axis to be interpolated in data\nmethod: by default use optimized method; use linear interp if Interp.LinearInterp()\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.interp1DGrid-Tuple{CompositeGrids.Interp.CompositeInterp, Any, Any, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.interp1DGrid","text":"function interp1DGrid(::CompositeInterp, data, xgrid, grid)\n\nlinear interpolation of data(grid[1:end]), return a Vector grid should be sorted.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\ngrid: points to be interpolated on\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.interp1DGrid-Tuple{Union{CompositeGrids.Interp.ChebInterp, CompositeGrids.Interp.LinearInterp}, Any, Any, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.interp1DGrid","text":"function interp1DGrid(::Union{LinearInterp,ChebInterp}, data, xgrid, grid)\n\nlinear interpolation of data(grid[1:end]), return a Vector simply call interp1D on each points\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\ngrid: points to be interpolated on\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.interp1DGrid-Union{Tuple{T}, Tuple{Any, T, Any}} where T","page":"Interpolation and Integration","title":"CompositeGrids.Interp.interp1DGrid","text":"function interp1DGrid(data, xgrid, grid; axis=1, method=InterpStyle(T))\n\nFor 1D data, do interpolation of data(grid[1:end]), return a Vector. For ND data, do interpolation of data(grid[1:end]) at given axis, return data of same dimension.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\ngrid: points to be interpolated on\naxis: axis to be interpolated in data\nmethod: by default use optimized method; use linear interp if :linear\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.interpsliced-Tuple{Any, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.interpsliced","text":"function interpsliced(neighbor, data; axis=1)\n\nInterpolate with given neighbor and sliced data. Assume data already sliced on given axis.\n\n#Members:\n\nneighbor: neighbor from findneighbor()\ndata: sliced data\naxis: axis sliced and to be interpolated\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.linear1D-Tuple{Any, Any, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.linear1D","text":"function linear1D(data, xgrid, x)\n\nlinear interpolation of data(x)\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.linear2D-NTuple{5, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.linear2D","text":"linear2D(data, xgrid, ygrid, x, y) \n\nlinear interpolation of data(x, y)\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\nygrid: one-dimensional grid of y\ndata: two-dimensional array of data\nx: x\ny: y\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.linearND-Tuple{Any, Any, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.linearND","text":"function linearND(data, xgrids, xs)\n\nlinear interpolation of data(xs)\n\n#Arguments:\n\nxgrids: n-dimensional grids, xgrids[i] is a 1D grid\ndata: n-dimensional array of data\nxs: list of x, x[i] corresponds to xgrids[i]\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.locate-Tuple{CompositeGrids.SimpleG.AbstractGrid, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.locate","text":"function locate(grid, x)\n\nreturn the index of grid point closest to x. Useful for Monte Carlo algorithm when variable x is continuous while histogram is stored on grid.\n\n#Arguments:\n\ngrid: one-dimensional grid of x\nx: point to locate\n\n\n\n\n\n","category":"method"},{"location":"lib/interpolate/#CompositeGrids.Interp.volume-Tuple{CompositeGrids.SimpleG.AbstractGrid, Any}","page":"Interpolation and Integration","title":"CompositeGrids.Interp.volume","text":"function volume(grid, i)\n\nreturn the volume of grid point i. The volume is defined as the length/area/volume/... of histogram bar represented by grid point i. In 1D grids of this package, it is defined as the length of interval between (grid[i-1]+grid[i])/2 and (grid[i]+grid[i+1])/2, and for edge points one side is replaced by boundary points. When index i is omitted, the length of the whole grid is returned. It is guaranteed that volume(grid)==sum(volume(grid, i) for i in 1:length(grid)).\n\n#Arguments:\n\ngrid: one-dimensional grid\ni: index of grid point\n\n\n\n\n\n","category":"method"},{"location":"README/","page":"Home","title":"Home","text":"(Image: img) (Image: img) (Image: img)","category":"page"},{"location":"README/#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"CompositeGrids gives a unified interface to generate various common 1D grids and also the composite grids that is a combination of basic grids, together with the floor function, interpolation function and also integration function that is optimized for some of the grids.","category":"page"},{"location":"README/#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"In the following example we show how to generate a &tau; grid from 0 to &beta;, log-densed at 0 and &beta;, and optimized for integration. The description is attached in the comments in the code.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"    using CompositeGrids\n    β = 10\n    \n    # Generating a log densed composite grid with LogDensedGrid()\n    tgrid = CompositeGrid.LogDensedGrid(\n        type=:gauss,# The top layer grid is :gauss, optimized for integration. For interpolation use :cheb\n        bound=[0.0, β],# The grid is defined on [0.0, β]\n        dense_at=[0.0, β],# and is densed at 0.0 and β, as given by 2nd and 3rd parameter.\n        N=5,# N of log grid\n        minterval=0.005, # minimum interval length of log grid\n        order=5 # N of bottom layer\n    )\n    # The grid has 3 layers.\n    # The top layer is defined by the boundary and densed points. In this case its:\n    println(\"Top layer:\",tgrid.panel.grid)\n    # The middle layer is a log grid with 4 points and minimum interval length 0.001:\n    println(\"First subgrid of middle layer:\",tgrid.subgrids[1].panel.grid)\n    # The bottom layer is a Gauss-Legendre grid with 5 points:\n    println(\"First subgrid of bottom layer:\",tgrid.subgrids[1].subgrids[1].grid)\n    \n    # function to be integrated:\n    f(t) = exp(t)+exp(β-t)\n    # numerical value on grid points:\n    data = [f(t) for (ti, t) in enumerate(tgrid.grid)]\n    \n    # integrate with integrate1D():\n    int_result = Interp.integrate1D(data, tgrid)\n    \n    println(\"result=\",int_result)\n    println(\"comparing to:\",2*(exp(β)-1))","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"    Top layer:[0.0, 5.0, 10.0]\n    First subgrid of middle layer:[0.0, 0.005000000000000001, 0.05000000000000001, 0.5, 5.0]\n    First subgrid of bottom layer:[0.00023455038515334025, 0.0011538267247357924, 0.0025000000000000005, 0.0038461732752642086, 0.004765449614846661]\n    result=44050.91248775534\n    comparing to:44050.931589613436","category":"page"},{"location":"README/#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"Static version could be installed via standard package manager with Pkg.add(\"CompositeGrids\").","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"For developing version, git clone this repo and add with Pkg.develop(\"directory/of/the/repo\").","category":"page"},{"location":"README/#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"README/#Basics","page":"Home","title":"Basics","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"The grids are provided in two modules, SimpleGrid and CompositeGrid. SimpleGrid consists of several common 1D grids that is defined straightforward and has simple structure. CompositeGrid defines a general type of grids composed by a panel grid and a set of subgrids. The common interface of grids are the following:","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"g.bound gives the boundary of the interval of the grid.\ng.size gives the total number of grid points.\ng.grid gives the array of grid points.\ng[i] returns the i-th grid point, same as g.grid[i].\nfloor(g, x) returns the largest index of grid point where g[i]<x. Return 1 for x<g[1] and (grid.size-1) for x>g[end], so that both floor() and (floor()+1) are valid grid indices.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Interpolation and integration are also provided, with different implemented functions for different grids.","category":"page"},{"location":"README/#Simple-Grids","page":"Home","title":"Simple Grids","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"Various basic grids are designed for use and also as components of composite grids, including: Arbitrary, Uniform, Log, BaryCheb, and GaussLegendre.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Arbitrary grid is the most general basic grid, which takes an array and turn it into a grid. An O(ln(N)) floor function based on searchsortedfirst() is provided.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Uniform grid is defined by the boundary and number of grid points. An O(1) floor function is provided.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Log grid is defined by the boundary, number of grid points, minimum interval, and also the direction. A log densed grid is generated according to the parameters provided. For example:","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"    using CompositeGrids\n    loggrid = SimpleGrid.Log{Float64}([0.0,1.0], 6, 0.0001, true)\n    println(loggrid.grid)","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"    [0.0, 0.00010000000000000005, 0.0010000000000000002, 0.010000000000000002, 0.1, 1.0]","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"An O(1) floor function is provided.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"BaryCheb grid is designed for interpolation. It's defined by the boundary and number of grid points, but the grid points are distributed according to Chebyshev nodes. The floor function is not optimized so the O(ln(N)) function will be used, but the interpolation is based on an optimized algorithm.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"GaussLegendre grid is designed for integration. It's defined by the boundary and number of grid points, but the grid points are distributed according to Gauss Legendre quadrature. The floor function is not optimized so the O(ln(N)) function will be used. The 1D integration is optimized.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Also notice that there's open grids and closed grids. Closed grids means that the boundary points are also grid points, while open grids means the opposite. Only BaryCheb and GaussLegendre are open.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"A detailed manual can be found here.","category":"page"},{"location":"README/#Composite-Grids","page":"Home","title":"Composite Grids","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"Composite grid is a general type of grids where the whole interval is first divided by a panel grid, then each interval of a panel grid is divided by a smaller grid in subgrids. Subgrid could also be composite grid.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"LogDensedGrid is a useful generator of CompositeGrid which gives a general solution when an 1D grid on an interval is needed to be log-densed around several points. For example, &tau; grids need to be densed around 0 and &beta;, and momentum grids need to be densed around Fermi momentum. The grid is defined as a three-layer composite grid with the top layer being an Arbitrary grid defined by the boundary and densed points, the middle layer a Log grid which is densed at the points required, and the bottom layer a grid of three options. Three types are :cheb, :gauss, and :uniform, which corresponds to BaryCheb grid for interpolation, GaussLegendre grid for integration, and Uniform grid for general use. The floor function is defined recursively, i.e. the floor function of the panel grid is called to find the corresponding subgrid, and then the floor function of the subgrid is called to find the result. Since the subgrids could also be CompositeGrid, this process continues until the lowest level of the subgrids is reached.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"A detailed manual can be found here.","category":"page"},{"location":"README/#Interpolation-and-Integration","page":"Home","title":"Interpolation and Integration","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"Interpolation gives an estimate of the function value at x with given grid and function value on the grid. For most of the simple grids the interpolation is given by linear interpolation with the floor function to find the corresponding grid points. BaryCheb uses an optimized algorithm for interpolation which makes use of the information of all grid points, and thus gives a more precise interpolation with the same number of grid points, given the condition that the function itself is smooth enough. For composite grids, the interpolation is done recursively, so that the final result depends on the type of lowest level grid. Interpolation for higher dimension where the data is defined on a list of grids is also given, but only linear interpolation is implemented, even when some of the grids are BaryCheb.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Integration over 1D grid is also provided. For most of simple grids it's given by linear integral, while for GaussLegendre grid it's optimized. For composite grids it's again recursively done so that the method depends on the type of lowest level grids.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Differenciation is provided for 1D grid, and a high precision algorithm is implemented for BaryCheb grids.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"A detailed manual can be found here.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"An example of interpolation and differenciation is shown below:","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"using CompositeGrids\nβ = π\n\n# Generating a log densed composite grid with LogDensedGrid()\ntgrid = CompositeGrid.LogDensedGrid(\n    type=:cheb,# The top layer grid is :cheb\n    bound=[0.0, β],# The grid is defined on [0.0, β]\n    dense_at=[0.0, β],# and is densed at 0.0 and β, as given by 2nd and 3rd parameter.\n    N=5,# N of log grid\n    minterval=0.005, # minimum interval length of log grid\n    order=5 # N of bottom layer\n)\n\n# function to be represented:\nf(t) = sin(t)\n# numerical value on grid points:\ndata = [f(t) for t in tgrid]\n\n# integrate with integrate1D():\nsin1 = Interp.interp1D(data, tgrid, 1.0)\ndsin1 = Interp.differentiate1D(data, tgrid, 1.0)\n\nprintln(\"result=\", (sin1, dsin1))\nprintln(\"comparing to:\", (sin(1.0), cos(1.0)))","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"result=(0.8414425112056995, 0.5400742649805592)\ncomparing to:(0.8414709848078965, 0.5403023058681398)","category":"page"},{"location":"","page":"API reference","title":"API reference","text":"CurrentModule = CompositeGrids","category":"page"},{"location":"#CompositeGrids","page":"API reference","title":"CompositeGrids","text":"","category":"section"},{"location":"","page":"API reference","title":"API reference","text":"Documentation for CompositeGrids.","category":"page"},{"location":"","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"","page":"API reference","title":"API reference","text":"Pages = [\n    \"lib/simple.md\",\n    \"lib/composite.md\",\n    \"lib/interpolate.md\",\t\n]\nDepth = 1","category":"page"},{"location":"lib/simple/#Basic-Grids","page":"Basic Grids","title":"Basic Grids","text":"","category":"section"},{"location":"lib/simple/","page":"Basic Grids","title":"Basic Grids","text":"Modules = [CompositeGrids.SimpleG]","category":"page"},{"location":"lib/simple/#CompositeGrids.SimpleG","page":"Basic Grids","title":"CompositeGrids.SimpleG","text":"Basic grids including common grids like arbitrary grids, uniform grids, log grids, and optimized grids like barycheb for interpolation and gausslegendre for integration.\n\n\n\n\n\n","category":"module"},{"location":"lib/simple/#CompositeGrids.SimpleG.AbstractGrid","page":"Basic Grids","title":"CompositeGrids.SimpleG.AbstractGrid","text":"All Grids are derived from AbstractGrid; ClosedGrid has bound[1], bound[2] == grid[1], grid[end], while OpenGrid has bound[1]<grid[1]<grid[end]<bound[2]\n\n\n\n\n\n","category":"type"},{"location":"lib/simple/#CompositeGrids.SimpleG.Arbitrary","page":"Basic Grids","title":"CompositeGrids.SimpleG.Arbitrary","text":"struct Arbitrary{T<:AbstractFloat} <: AbstractGrid\n\nArbitrary grid generated from given sorted grid.\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : integration weight\n\n#Constructor:\n\nfunction Arbitrary{T}(grid) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/simple/#CompositeGrids.SimpleG.BaryCheb","page":"Basic Grids","title":"CompositeGrids.SimpleG.BaryCheb","text":"struct BaryCheb{T<:AbstractFloat} <: AbstractGrid\n\nBaryCheb grid generated on [bound[1], bound[2]] with order N.\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : interpolation weight\n\n#Constructor:\n\nfunction BaryCheb{T}(bound, size) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/simple/#CompositeGrids.SimpleG.GaussLegendre","page":"Basic Grids","title":"CompositeGrids.SimpleG.GaussLegendre","text":"struct GaussLegendre{T<:AbstractFloat} <: AbstractGrid\n\nGaussLegendre grid generated on [bound[1], bound[2]] with order N.\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : integration weight\n\n#Constructor:\n\nfunction GaussLegendre{T}(bound, size) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/simple/#CompositeGrids.SimpleG.Log","page":"Basic Grids","title":"CompositeGrids.SimpleG.Log","text":"struct Log{T<:AbstractFloat} <: AbstractGrid\n\nLog grid generated on [bound[1], bound[2]] with N grid points. Minimal interval is set to be minterval. Dense to sparse if d2s, vice versa.\n\nOn [0, 1], a typical d2s Log grid looks like [0, λ^(N-1), ..., λ^2, λ, 1].\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : integration weight\nλ : scale parameter\nd2s : dense to sparse or not\n\n#Constructor:\n\nfunction Log{T}(bound, size, minterval, d2s) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/simple/#CompositeGrids.SimpleG.Uniform","page":"Basic Grids","title":"CompositeGrids.SimpleG.Uniform","text":"struct Uniform{T<:AbstractFloat} <: AbstractGrid\n\nUniform grid generated on [bound[1], bound[2]] with N points\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : integration weight\n\n#Constructor:\n\nfunction Uniform{T}(bound, size) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/simple/#CompositeGrids.SimpleG.Uniform-Union{Tuple{BTIN}, Tuple{T}, Tuple{Any, Any}} where {T<:AbstractFloat, BTIN}","page":"Basic Grids","title":"CompositeGrids.SimpleG.Uniform","text":"function Uniform{T}(bound, N) where {T<:AbstractFloat}\n\ncreate Uniform grid.\n\n\n\n\n\n","category":"method"},{"location":"lib/simple/#Base.floor-Tuple{CompositeGrids.SimpleG.AbstractGrid, Any}","page":"Basic Grids","title":"Base.floor","text":"function Base.floor(grid::AbstractGrid, x) #where {T}\n\nuse basic searchsorted function to find the index of largest grid point smaller than x.\n\nreturn 1 for x<grid[1] and grid.size-1 for x>grid[end].\n\n\n\n\n\n","category":"method"},{"location":"lib/simple/#Base.floor-Union{Tuple{T}, Tuple{CompositeGrids.SimpleG.Log{T}, Any}} where T","page":"Basic Grids","title":"Base.floor","text":"function Base.floor(grid::Log{T}, x) where {T}\n\nfind the index of largest grid point smaller than x.\n\nreturn 1 for x<grid[1] and grid.size-1 for x>grid[end].\n\n\n\n\n\n","category":"method"},{"location":"lib/simple/#Base.floor-Union{Tuple{T}, Tuple{CompositeGrids.SimpleG.Uniform{T}, Any}} where T","page":"Basic Grids","title":"Base.floor","text":"function Base.floor(grid::Uniform{T}, x) where {T}\n\nfind the index of largest grid point smaller than x.\n\nreturn 1 for x<grid[1] and grid.size-1 for x>grid[end].\n\n\n\n\n\n","category":"method"},{"location":"lib/simple/#Base.show-Tuple{IO, CompositeGrids.SimpleG.AbstractGrid}","page":"Basic Grids","title":"Base.show","text":"show(io::IO, grid::AbstractGrid)\n\nWrite a text representation of the AbstractGrid  grid to the output stream io.\n\n\n\n\n\n","category":"method"}]
}
